employment <- employment %>% select(-3)
employment$D <- employment$`D+E`/ 2
employment$E <- employment$`D+E`/ 2
employment$S <- employment$`S+T+U`/ 3
employment$T <- employment$`S+T+U`/ 3
employment$U <- employment$`S+T+U`/ 3
employment <- employment %>%
select(-c("D+E", "S+T+U")) %>%
pivot_longer(-c("gender", "date"), names_to = "sector_code", values_to = "number") %>%
left_join(., sector_info, by = "sector_code")
employment <- employment[!is.na(employment$sector_name),]
employment
# Read labor cost Index data
labor_cost_index <-
read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_labor_cost_index.xlsx", range = "A4:P54")
colnames(labor_cost_index)[3] <- "date"
labor_cost_index$date <-  seq.Date(from = as.Date("2010-03-30"), to = as.Date("2022-06-30"), by = "quarter")
labor_cost_index <- labor_cost_index[,c(-1,-2)]
colnames(labor_cost_index) <- colnames(labor_cost_index) %>% gsub("\\..*", "", .)
labor_cost_index <-
labor_cost_index %>%
pivot_longer(-c("date"), names_to = "sector_code", values_to = "value") %>%
left_join(.,sector_info, by="sector_code") %>%
select(sector_code, sector_name, everything())
labor_cost_index <- labor_cost_index[!is.na(labor_cost_index$sector_name),]
# Read Employment Data
employment_male <-
read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_employment.xlsx",
range = "Z6:AW14")
employment_female <-
read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_employment.xlsx",
range = "AY6:BW14")
# Create new column as gender
employment_male$gender <- c("male")
employment_female$gender <- c("female")
# drop first row and columns whose values are all NA
employment_male <-  employment_male[-1,] %>%
fill(1) %>%
select_if(function(col) !all(is.na(col)))
employment_female <-  employment_female[-1,] %>%
fill(1) %>%
select_if(function(col) !all(is.na(col)))
# Create a quarterly time series starting 2021Q1 and ending 2022Q3
employment_male[,2] <- seq.Date(from = as.Date("2021-03-30"), to = as.Date("2022-09-30"), by = "quarter")
employment_female[,2] <- seq.Date(from = as.Date("2021-03-30"), to = as.Date("2022-09-30"), by = "quarter")
# Rearrange tibble columns such that gender comes first
employment_male <- employment_male[,-1] %>%
select(gender, everything())
employment_female <- employment_female[,-1] %>%
select(gender, everything())
# Change column name of date column
colnames(employment_male)[2] <- "date"
colnames(employment_female)[2] <- "date"
employment <- rbind(employment_female, employment_male)
colnames(employment) <- colnames(employment) %>% gsub(".*[(]([^.]+)[)].*", "\\1", .)
employment <- employment %>% select(-3)
employment$D <- employment$`D+E`/ 2
employment$E <- employment$`D+E`/ 2
employment$S <- employment$`S+T+U`/ 3
employment$T <- employment$`S+T+U`/ 3
employment$U <- employment$`S+T+U`/ 3
employment <- employment %>%
select(-c("D+E", "S+T+U")) %>%
pivot_longer(-c("gender", "date"), names_to = "sector_code", values_to = "number") %>%
left_join(., sector_info, by = "sector_code")
employment <- employment[!is.na(employment$sector_name),]
employment
# Read labor cost Index data
labor_cost_index <-
read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_labor_cost_index.xlsx", range = "A4:P54")
colnames(labor_cost_index)[3] <- "date"
labor_cost_index$date <-  seq.Date(from = as.Date("2010-03-30"), to = as.Date("2022-06-30"), by = "quarter")
labor_cost_index <- labor_cost_index[,c(-1,-2)]
colnames(labor_cost_index) <- colnames(labor_cost_index) %>% gsub("\\..*", "", .)
labor_cost_index <-
labor_cost_index %>%
pivot_longer(-c("date"), names_to = "sector_code", values_to = "value") %>%
left_join(.,sector_info, by="sector_code") %>%
select(sector_code, sector_name, everything())
labor_cost_index <- labor_cost_index[!is.na(labor_cost_index$sector_name),]
# Read GDP Index Data
gdp <- read_excel("Project_data_gdp.xlsx",
range = "A7:C318")
# Read GDP Index Data
gdp <- read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_gdp.xlsx",
range = "A7:C318")
# Rename columns
colnames(gdp) <- c("sector", "year", "gdp_index")
# Filter NA rows
gdp <- gdp %>%
filter(!is.na(sector))
gdp %>% head()
# Read Terms of Trade Data
tot <-
read_excel("Project_data_ToT.xlsx",
range = "C4:BI157")
# Read Terms of Trade Data
tot <-
read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/Project_data_ToT.xlsx",
range = "C4:BI157")
# Read Terms of Trade Data
tot <-
read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/Project_data_ToT.xlsx", range = "C4:BI157")
# Read Terms of Trade Data
tot <-
read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_ToT.xlsx", range = "C4:BI157")
tot <- tot %>%
select(contains("ABD Doları"))
tot$date <-  seq.Date(from = as.Date("2010-01-01"), to = as.Date("2022-09-01"), by = "month")
tot <- tot[,26:30]
tot <- tot %>% select(date, everything())
tot <- tot[!is.na(tot[,3]),]
tot <- tot %>% pivot_longer(-c("date"), names_to = "sector_code", values_to = "value")
tot$sector_code <- tot$sector_code %>% gsub("[.].*", "",.)
tot <- left_join(tot, sector_info, by = "sector_code") %>% select(sector_code, sector_name, group, everything())
tot %>% head()
# Read Exports  Data
export <- read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/Project_data_exports.xlsx",
range = "A5:D854")
# Read Terms of Trade Data
tot <-
read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_ToT.xlsx", range = "C4:BI157")
tot <- tot %>%
select(contains("ABD Doları"))
tot$date <-  seq.Date(from = as.Date("2010-01-01"), to = as.Date("2022-09-01"), by = "month")
tot <- tot[,26:30]
tot <- tot %>% select(date, everything())
tot <- tot[!is.na(tot[,3]),]
tot <- tot %>% pivot_longer(-c("date"), names_to = "sector_code", values_to = "value")
tot$sector_code <- tot$sector_code %>% gsub("[.].*", "",.)
tot <- left_join(tot, sector_info, by = "sector_code") %>% select(sector_code, sector_name, group, everything())
tot %>% head()
# Read Exports  Data
export <- read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_exports.xlsx",
range = "A5:D854")
export <- export %>% filter(!if_all(, is.na))
export[1,1] <- as.character(2022)
export$Year <- export$Year %>% as.double()
export <- export %>% fill(Year)
export <- export[!is.na(export[,2]),]
colnames(export) <- c("year", "sector_code", "sector_name", "export")
export$export <- gsub(pattern = "-", replacement = 0, export$export) %>% as.double()
export <-  export[export$sector_code %in% sector_info$sector_code,] %>% select(-sector_name)
export <-
left_join(export, sector_info, by = "sector_code") %>%
select(sector_code, sector_name, group, everything())
export
# Read Imports Data
import <- read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/Project_data_imports.xlsx",
range = "A5:D854")
# Read Terms of Trade Data
tot <-
read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_ToT.xlsx", range = "C4:BI157")
tot <- tot %>%
select(contains("ABD Doları"))
tot$date <-  seq.Date(from = as.Date("2010-01-01"), to = as.Date("2022-09-01"), by = "month")
tot <- tot[,26:30]
tot <- tot %>% select(date, everything())
tot <- tot[!is.na(tot[,3]),]
tot <- tot %>% pivot_longer(-c("date"), names_to = "sector_code", values_to = "value")
tot$sector_code <- tot$sector_code %>% gsub("[.].*", "",.)
tot <- left_join(tot, sector_info, by = "sector_code") %>% select(sector_code, sector_name, group, everything())
tot %>% head()
# Read Exports  Data
export <- read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_exports.xlsx",
range = "A5:D854")
export <- export %>% filter(!if_all(, is.na))
export[1,1] <- as.character(2022)
export$Year <- export$Year %>% as.double()
export <- export %>% fill(Year)
export <- export[!is.na(export[,2]),]
colnames(export) <- c("year", "sector_code", "sector_name", "export")
export$export <- gsub(pattern = "-", replacement = 0, export$export) %>% as.double()
export <-  export[export$sector_code %in% sector_info$sector_code,] %>% select(-sector_name)
export <-
left_join(export, sector_info, by = "sector_code") %>%
select(sector_code, sector_name, group, everything())
export
# Read Imports Data
import <- read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_imports.xlsx",
range = "A5:D854")
import <- import %>% filter(!if_all(, is.na))
import[1,1] <- as.character(2022)
import$Year <- import$Year %>% as.double()
import <- import %>% fill(Year)
import <- import[!is.na(import[,2]),]
colnames(import) <- c("year", "sector_code", "sector_name", "import")
import$import <- gsub(pattern = "-", replacement = 0, import$import) %>% as.double()
import <-  import[import$sector_code %in% sector_info$sector_code,] %>% select(-sector_name)
import <-
left_join(import, sector_info, by = "sector_code") %>%
select(sector_code, sector_name, group, everything())
import
#Merge exports and imports data
trade <- inner_join(export, import, by = c("sector_code", "sector_name", "year", "group"))
# Read PPI Data
ppi_1 <- read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_ppi_new.xlsx",
range = "A4:AH158")
ppi_1 <- ppi_1 %>%
fill(1) %>%
select_if(function(col) !all(is.na(col)))
colnames(ppi_1)[1:2] <- c("year", "month")
ppi_1$date <- seq.Date(from = as.Date("2010-01-01"), to = as.Date("2022-10-01"), by = "month")
ppi_1 <- ppi_1[,c(-1,-2)]
ppi_1 <- ppi_1 %>% select(date, everything())
ppi_1 <- ppi_1 %>% select(date, (ncol(.)-3):ncol(.))
colnames(ppi_1) <-  colnames(ppi_1) %>% gsub("\\..*", "", .)
ppi_1
# Read PPI Services Data
ppi_2 <- read_excel("Project_data_ppi_services_new.xlsx",
range = "A4:I73")
# Read PPI Data
ppi_1 <- read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_ppi_new.xlsx",
range = "A4:AH158")
ppi_1 <- ppi_1 %>%
fill(1) %>%
select_if(function(col) !all(is.na(col)))
colnames(ppi_1)[1:2] <- c("year", "month")
ppi_1$date <- seq.Date(from = as.Date("2010-01-01"), to = as.Date("2022-10-01"), by = "month")
ppi_1 <- ppi_1[,c(-1,-2)]
ppi_1 <- ppi_1 %>% select(date, everything())
ppi_1 <- ppi_1 %>% select(date, (ncol(.)-3):ncol(.))
colnames(ppi_1) <-  colnames(ppi_1) %>% gsub("\\..*", "", .)
ppi_1
# Read PPI Services Data
ppi_2 <- read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_ppi_services_new.xlsx",
range = "A4:I73")
ppi_2 <- ppi_2 %>%
fill(1) %>%
select_if(function(col) !all(is.na(col)))
colnames(ppi_2)[1:2] <- c("year", "month")
ppi_2$date <- seq.Date(from = as.Date("2017-01-01"), to = as.Date("2022-09-01"), by = "month")
ppi_2 <- ppi_2[,c(-1,-2)]
ppi_2 <- ppi_2 %>% select(date, everything())
ppi_2 <- ppi_2 %>% select(date, everything())
colnames(ppi_2) <-  colnames(ppi_2) %>% gsub("\\..*", "", .)
ppi_2
# Merge ppi and ppi services data
ppi <- left_join(ppi_1, ppi_2, by = "date")
ppi <- ppi %>%
pivot_longer(-c("date"), names_to = "sector_code", values_to = "index")
# Obtain conventional sector names and groupings
ppi <-
left_join(ppi, sector_info, by = "sector_code") %>%
select(sector_code, sector_name, group, everything())
ppi
library(readxl)
library(dplyr)
library(tidyr)
sector_info <- read_excel("docs/Project_Data_TURKSTAT/Sector_info.xlsx")
sector_info %>% head()
sector_info %>% head()
# Read sector info data
sector_info <- read_excel("docs/Project_Data_TURKSTAT/Sector_info.xlsx")
sector_info %>% head()
# Read Excel Data for company info regarding number of employees for different company sizes.
company_info <-
read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_company_info.xlsx")
# Drop columns whose values are all NA
company_info <- company_info %>%
select_if(function(col) !all(is.na(col)))
# Drop rows whose values except first column are all NA
company_info <- company_info %>%
filter(!if_all(2:ncol(company_info), is.na))
# Fill first column with previous values
company_info <- company_info %>%
fill(1)
# Fill second column with previous values
company_info <- company_info %>%
fill(2)
# Fill NA in first row with previous values
first_row <- company_info %>%
filter_all(any_vars(is.na(.))) %>%
slice(1) %>%
as.data.frame() %>%
pivot_longer(-1) %>%
fill(value, .direction = "down") %>%
select(value) %>%
as.matrix()
company_info[1,2:ncol(company_info)] <- t(first_row)
# Fill NA in second row with previous values
second_row <- company_info %>%
filter_all(any_vars(is.na(.))) %>%
slice(1) %>%
as.data.frame() %>%
pivot_longer(-1) %>%
fill(value, .direction = "down") %>%
select(value) %>%
as.matrix()
company_info[2,2:ncol(company_info)] <- t(second_row)
# Drop cell values before blanks
company_info <- company_info %>% as.matrix() %>% gsub(".*\r\n", "", .) %>% as_tibble()
#Drop columns with share (%)
cond <- !(company_info[3,] == "(%)") %>% as.vector()
company_info <- company_info[,cond]
#Drop columns with entity types
cond_1 <- !(company_info[2,] == "Entity Types") %>% as.vector()
company_info <- company_info[, cond_1]
# Drop row with duplicate number values
company_info <- company_info[-3,]
company_info[2,] <- as.list(company_info[2,] %>% gsub(pattern = " ", replacement = "_", company_info))
header_new <- paste(company_info[1,], company_info[2,], sep = "/")
header_new[1:2] <-  c("sector", "size")
names(company_info) <- header_new
company_info <-  company_info %>%
filter(!(sector %in% c("", "Türkiye")))
company_info <- company_info %>%
pivot_longer(-c(sector, size)) %>%
separate(name, into = c("year", "number"), sep = "/")
company_info$number <- company_info$number %>%
gsub(pattern = ".companıes", replacement = "_companies")
company_info %>%
pivot_wider(names_from = number, values_from = value)
company_info$sector_code <- company_info$sector %>% gsub("-.*", "", .)
company_info <-  company_info %>%
select(sector_code, everything()) %>%
select(-sector)
company_info$value <- as.double(company_info$value)
company_info <-
left_join(company_info, sector_info, by = "sector_code") %>%
select(sector_code, sector_name, group, everything())
company_info %>% head()
# Read Balance Sheet Data
company_bs <- read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_b_s.xlsx",
range = "A4:O4032",
col_names = c("sector_code", "accounts", 2009:2021))
company_bs <- company_bs %>%
fill(sector_code)
company_bs <-
company_bs[!is.na(company_bs[,3]),]
company_bs <- company_bs[-1,]
company_bs$sector_code <-
company_bs$sector_code %>%
gsub(".*\r\n", "", .) %>%
gsub("-.*", "", .)
company_bs$accounts <- company_bs$accounts %>% sub("^[^\r\n]+", "",.)
company_bs$accounts <- company_bs$accounts %>% gsub("\r\n", "",.)
company_bs <- company_bs %>%
pivot_longer(-c(sector_code,accounts), names_to = "year", values_to = "value")
company_bs <- company_bs %>% select(sector_code, everything())
company_bs <-
left_join(company_bs, sector_info, by = "sector_code") %>%
select(sector_code, sector_name, group, everything())
company_bs$year <- as.integer(company_bs$year)
company_bs %>% head()
# Read Income Statement Data
company_is <- read_excel("/Users/yigitonay/Documents/GitHub/mef06g-time-and-space/docs/Project_Data_TURKSTAT/Project_data_i_s.xlsx",
range = "A4:O921",
col_names = c("sector_code", "accounts", 2009:2021))
# Fill sectors in first column with previous observations
company_is <- company_is %>%
fill(sector_code)
# Remove blank rows
company_is <- company_is[!is.na(company_is[,3]),]
# Remove redundant first row
company_is <- company_is[-1,]
# Remove linespaces from sectors and accounts columns so that english phrases remain
company_is$sector_code <- company_is$sector_code %>% gsub("- .*", "", .)
# pivot data into longer (panel) format
company_is <- company_is %>%
pivot_longer(-c(sector_code, accounts), names_to = "year", values_to = "value")
company_is <- company_is %>% select(sector_code,  everything())
company_is <-
left_join(company_is, sector_info, by = "sector_code") %>%
select(sector_code, sector_name, group, everything())
company_is$accounts <- company_is$accounts %>% gsub(".*\r\n", "", .)
company_is$year <- company_is$year %>% as.integer()
company_is %>% head()
saveRDS(company_is, "docs/Project_Data/income_statement.rds")
saveRDS(company_bs, "docs/Project_Data/balance_sheet.rds")
saveRDS(company_info, "docs/Project_Data/sector_info.rds")
saveRDS(sector_info, "docs/Project_Data/sector_grouping.rds")
saveRDS(company_info, "docs/Project_Data/sector_information.rds")
saveRDS(employment, "docs/Project_Data/employment.rds")
saveRDS(labor_cost_index, "docs/Project_Data/labor_cost.rds")
saveRDS(gdp, "docs/Project_Data/gdp.rds")
saveRDS(tot, "docs/Project_Data/terms_of_trade.rds")
saveRDS(trade, "docs/Project_Data/trade.rds")
saveRDS(ppi, "docs/Project_Data/input_cost.rds")
gc()
rm(list = ls())
# Read sector info data
sector_info <- read_excel("docs/Project_Data_TURKSTAT/Sector_info.xlsx")
saveRDS(sector_info, "docs/Project_Data/sector_grouping.rds")
sector_info %>% head()
kable(sector_info)
library(readxl)
library(dplyr)
library(tidyr)
library(knitr)
kable(sector_info)
# Read sector info data
sector_info <- read_excel("docs/Project_Data_TURKSTAT/Sector_info.xlsx")
saveRDS(sector_info, "docs/Project_Data/sector_grouping.rds")
sector_info %>% head()
kable(sector_info)
# Read Excel Data for company info regarding number of employees for different company sizes.
company_info <-
read_excel("docs/Project_Data_TURKSTAT/Project_data_company_info.xlsx")
# Drop columns whose values are all NA
company_info <- company_info %>%
select_if(function(col) !all(is.na(col)))
# Drop rows whose values except first column are all NA
company_info <- company_info %>%
filter(!if_all(2:ncol(company_info), is.na))
# Fill first column with previous values
company_info <- company_info %>%
fill(1)
# Fill second column with previous values
company_info <- company_info %>%
fill(2)
# Fill NA in first row with previous values
first_row <- company_info %>%
filter_all(any_vars(is.na(.))) %>%
slice(1) %>%
as.data.frame() %>%
pivot_longer(-1) %>%
fill(value, .direction = "down") %>%
select(value) %>%
as.matrix()
company_info[1,2:ncol(company_info)] <- t(first_row)
# Fill NA in second row with previous values
second_row <- company_info %>%
filter_all(any_vars(is.na(.))) %>%
slice(1) %>%
as.data.frame() %>%
pivot_longer(-1) %>%
fill(value, .direction = "down") %>%
select(value) %>%
as.matrix()
company_info[2,2:ncol(company_info)] <- t(second_row)
# Drop cell values before blanks
company_info <- company_info %>% as.matrix() %>% gsub(".*\r\n", "", .) %>% as_tibble()
#Drop columns with share (%)
cond <- !(company_info[3,] == "(%)") %>% as.vector()
company_info <- company_info[,cond]
#Drop columns with entity types
cond_1 <- !(company_info[2,] == "Entity Types") %>% as.vector()
company_info <- company_info[, cond_1]
# Drop row with duplicate number values
company_info <- company_info[-3,]
company_info[2,] <- as.list(company_info[2,] %>% gsub(pattern = " ", replacement = "_", company_info))
header_new <- paste(company_info[1,], company_info[2,], sep = "/")
header_new[1:2] <-  c("sector", "size")
names(company_info) <- header_new
company_info <-  company_info %>%
filter(!(sector %in% c("", "Türkiye")))
company_info <- company_info %>%
pivot_longer(-c(sector, size)) %>%
separate(name, into = c("year", "number"), sep = "/")
company_info$number <- company_info$number %>%
gsub(pattern = ".companıes", replacement = "_companies")
company_info %>%
pivot_wider(names_from = number, values_from = value)
company_info$sector_code <- company_info$sector %>% gsub("-.*", "", .)
company_info <-  company_info %>%
select(sector_code, everything()) %>%
select(-sector)
company_info$value <- as.double(company_info$value)
company_info <-
left_join(company_info, sector_info, by = "sector_code") %>%
select(sector_code, sector_name, group, everything())
saveRDS(company_info, "docs/Project_Data/sector_information.rds")
company_info %>% head()
# Read Balance Sheet Data
company_bs <- read_excel("docs/Project_Data_TURKSTAT/Project_data_b_s.xlsx",
range = "A4:O4032",
col_names = c("sector_code", "accounts", 2009:2021))
company_bs <- company_bs %>%
fill(sector_code)
company_bs <-
company_bs[!is.na(company_bs[,3]),]
company_bs <- company_bs[-1,]
company_bs$sector_code <-
company_bs$sector_code %>%
gsub(".*\r\n", "", .) %>%
gsub("-.*", "", .)
company_bs$accounts <- company_bs$accounts %>% sub("^[^\r\n]+", "",.)
company_bs$accounts <- company_bs$accounts %>% gsub("\r\n", "",.)
company_bs <- company_bs %>%
pivot_longer(-c(sector_code,accounts), names_to = "year", values_to = "value")
company_bs <- company_bs %>% select(sector_code, everything())
company_bs <-
left_join(company_bs, sector_info, by = "sector_code") %>%
select(sector_code, sector_name, group, everything())
company_bs$year <- as.integer(company_bs$year)
saveRDS(company_bs, "docs/Project_Data/balance_sheet.rds")
company_bs %>% head()
# Read Income Statement Data
company_is <- read_excel("docs/Project_Data_TURKSTAT/Project_data_i_s.xlsx",
range = "A4:O921",
col_names = c("sector_code", "accounts", 2009:2021))
# Fill sectors in first column with previous observations
company_is <- company_is %>%
fill(sector_code)
# Remove blank rows
company_is <- company_is[!is.na(company_is[,3]),]
# Remove redundant first row
company_is <- company_is[-1,]
# Remove linespaces from sectors and accounts columns so that english phrases remain
company_is$sector_code <- company_is$sector_code %>% gsub("- .*", "", .)
# pivot data into longer (panel) format
company_is <- company_is %>%
pivot_longer(-c(sector_code, accounts), names_to = "year", values_to = "value")
company_is <- company_is %>% select(sector_code,  everything())
company_is <-
left_join(company_is, sector_info, by = "sector_code") %>%
select(sector_code, sector_name, group, everything())
company_is$accounts <- company_is$accounts %>% gsub(".*\r\n", "", .)
company_is$year <- company_is$year %>% as.integer()
saveRDS(company_is, "docs/Project_Data/income_statement.rds")
company_is %>% head()
